// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XBo3ATGmQSjqbBPzfVXf7
// Component: tDidRZnqWmZ0X
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ArticleNav from "../../ArticleNav"; // plasmic-import: 4VBOLTD83lUZrU/component
import ArticleIntro from "../../ArticleIntro"; // plasmic-import: TZikInR5j5KSSW/component
import ArticleBody from "../../ArticleBody"; // plasmic-import: n3pApaVq1-7FA9/component

import { useScreenVariants as useScreenVariantsjfmRqS3HrPugY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JfmRqS3HrPugY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_article_1_component_package.module.css"; // plasmic-import: 8XBo3ATGmQSjqbBPzfVXf7/projectcss
import sty from "./PlasmicArticle1.module.css"; // plasmic-import: tDidRZnqWmZ0X/css

export type PlasmicArticle1__VariantMembers = {};
export type PlasmicArticle1__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticle1__VariantsArgs;
export const PlasmicArticle1__VariantProps = new Array<VariantPropType>();

export type PlasmicArticle1__ArgsType = {};
type ArgPropType = keyof PlasmicArticle1__ArgsType;
export const PlasmicArticle1__ArgProps = new Array<ArgPropType>();

export type PlasmicArticle1__OverridesType = {
  root?: p.Flex<"div">;
  articleNav?: p.Flex<typeof ArticleNav>;
  articleIntro?: p.Flex<typeof ArticleIntro>;
  articleBody?: p.Flex<typeof ArticleBody>;
};

export interface DefaultArticle1Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticle1__RenderFunc(props: {
  variants: PlasmicArticle1__VariantsArgs;
  args: PlasmicArticle1__ArgsType;
  overrides: PlasmicArticle1__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjfmRqS3HrPugY()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {(
        hasVariant(globalVariants, "screen", "largestMobile")
          ? true
          : hasVariant(globalVariants, "screen", "smallestMobile")
          ? true
          : true
      ) ? (
        <ArticleNav
          data-plasmic-name={"articleNav"}
          data-plasmic-override={overrides.articleNav}
          className={classNames("__wab_instance", sty.articleNav)}
        />
      ) : null}

      <ArticleIntro
        data-plasmic-name={"articleIntro"}
        data-plasmic-override={overrides.articleIntro}
        className={classNames("__wab_instance", sty.articleIntro)}
      />

      <ArticleBody
        data-plasmic-name={"articleBody"}
        data-plasmic-override={overrides.articleBody}
        className={classNames("__wab_instance", sty.articleBody)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "articleNav", "articleIntro", "articleBody"],
  articleNav: ["articleNav"],
  articleIntro: ["articleIntro"],
  articleBody: ["articleBody"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleNav: typeof ArticleNav;
  articleIntro: typeof ArticleIntro;
  articleBody: typeof ArticleBody;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticle1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticle1__VariantsArgs;
    args?: PlasmicArticle1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticle1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticle1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticle1__ArgProps,
          internalVariantPropNames: PlasmicArticle1__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicArticle1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticle1";
  } else {
    func.displayName = `PlasmicArticle1.${nodeName}`;
  }
  return func;
}

export const PlasmicArticle1 = Object.assign(
  // Top-level PlasmicArticle1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleNav: makeNodeComponent("articleNav"),
    articleIntro: makeNodeComponent("articleIntro"),
    articleBody: makeNodeComponent("articleBody"),

    // Metadata about props expected for PlasmicArticle1
    internalVariantProps: PlasmicArticle1__VariantProps,
    internalArgProps: PlasmicArticle1__ArgProps
  }
);

export default PlasmicArticle1;
/* prettier-ignore-end */
